    def __init__(self):
        self.image= load_image('easy_mode.png')

    def draw(self):
        self.image.draw(1600,300)



class Pipe2:
    image = None;
    def __init__(self):
        self.x, self.y = 400,300
        if Pipe2.image ==None:
            Pipe2.image = load_image('pause1.png')
    def update(self,frame_time):
        pass

    def draw(self):
        self.image.draw(self.x, self.y)

    def get_bb(self):
        return self.x-50,self.y-50,self.x+50,self.y+50

    def draw_bb(self):
        draw_rectangle(*self.get_bb())



    pipe_data_file = open('pipe_data.txt', 'r')
    pipe_data = json.load(pipe_data_file)
    pipe_data_file.close()

    pipe = []
    for name in pipe_data:
        player = Pipe1()
        player.name = name
        player.x = pipe_data[name]['x']
        player.y = pipe_data[name]['y']
        pipe.append(player)
    return pipe


from pico2d import *

import game_framework
import pause_state

import normal_stage
import hard_stage


from cat import Cat # import Boy class from boy.py
from map1 import Map1
from pipe import Pipe1






name = "easy_stage"

cat = None
map1 = None
pipe = None


def create_world():
    global cat,map1, pipe
    cat = Cat()
    map1 = Map1()
    pipe = Pipe1()



def destroy_world():
    global cat,map1,pipe

    del(cat)
    del(map1)
    del(pipe)




def enter():
    open_canvas()
    game_framework.reset_time()
    create_world()


def exit():
    destroy_world()
    close_canvas()


def pause():
    pass


def resume():
    pass


def handle_events(frame_time):
    events = get_events()
    for event in events:
        if event.type == SDL_QUIT:
            game_framework.quit()
        elif event.type == SDL_KEYDOWN and event.key == SDLK_n:
            game_framework.push_state(normal_stage)
        elif event.type == SDL_KEYDOWN and event.key == SDLK_h:
            game_framework.push_state(hard_stage)
        else:
            if (event.type, event.key) == (SDL_KEYDOWN, SDLK_ESCAPE):
                game_framework.quit()
            else:
                cat.handle_event(event)


def collide(a, b):
    left_a, bottom_a, right_a, top_a = a.get_bb()
    left_b, bottom_b, right_b, top_b = b.get_bb()

    if left_a>right_b:return False
    if right_a < left_b:return False
    if top_a<bottom_b:return False
    if bottom_a>top_b:return False

    return True



def update(frame_time):
    global move
    cat.update(frame_time)
    if collide(map1,cat):
        print("collision")
        cat.stop()
    if collide(pipe,cat):
        print("collision")
        cat.stop()




    #if collide(map1,cat):
       # print("collision")

def draw(frame_time):
    clear_canvas()

    pipe.draw()
    map1.draw()
    cat.draw()

    pipe.draw_bb()
    map1.draw_bb()
    cat.draw_bb()
    pass

    update_canvas()




from pico2d import *

import cat
import random
import json


class Pistol:

    PIXEL_PER_METER = (10.0 / 0.3)  # 10 pixel 30 cm
    RUN_SPEED_KMPH = 20.0  # Km / Hour
    RUN_SPEED_MPM = (RUN_SPEED_KMPH * 1000.0 / 60.0)
    RUN_SPEED_MPS = (RUN_SPEED_MPM / 60.0)
    RUN_SPEED_PPS = (RUN_SPEED_MPS * PIXEL_PER_METER)

    TIME_PER_ACTION = 0.5
    ACTION_PER_TIME = 1.0 / TIME_PER_ACTION
    FRAMES_PER_ACTION = 8

    LOAD,FIRE=1,1

    image = None;

    def __init__(self):
        self.x, self.y = 200,200
        self.dir=0
        self.frame = 0
        self.life_time = 0.0
        self.total_frames = 0.0
        self.state = self.LOAD
        if Pistol.image ==None:
            Pistol.image = load_image('ground.png')

    def set_map1(self, bg):
        self.bg = bg

    def set_map2(self,bg):
        self.bg=bg

    def set_map3(self,bg):
        self.bg =bg

    def update(self, frame_time):
        self.life_time += frame_time
        distance = Pistol.RUN_SPEED_PPS * frame_time
        self.total_frames += Pistol.FRAMES_PER_ACTION * Pistol.ACTION_PER_TIME * frame_time
        self.frame = 0
        self.x += (self.dir * distance)

        pass

    def draw(self):
        sx = self.x - self.bg.window_left
        sy = self.y - self.bg.window_bottom
        self.image.draw(sx, sy)

    def get_bb(self):
        return self.x - 20 - self.bg.window_left, self.y-20-self.bg.window_bottom,self.x+20-self.bg.window_left,self.y+20-self.bg.window_bottom

    def draw_bb(self):
        draw_rectangle(*self.get_bb())

    def handle_event(self,event):
        if (event.type, event.key) == (SDL_KEYDOWN, SDLK_a):
            if self.state in (self.LOAD,self.FIRE):
                self.state=self.FIRE
                self.dir=1


        pass


import random
import game_framework
import normal_stage
from pico2d import *

from cat import Cat
class Pistol:

    PIXEL_PER_METER = (10.0 / 0.3)           # 10 pixel 30 cm
    RUN_SPEED_KMPH = 20.0                    # Km / Hour
    RUN_SPEED_MPM = (RUN_SPEED_KMPH * 1000.0 / 60.0)
    RUN_SPEED_MPS = (RUN_SPEED_MPM / 60.0)
    RUN_SPEED_PPS = (RUN_SPEED_MPS * PIXEL_PER_METER)

    TIME_PER_ACTION = 0.5
    ACTION_PER_TIME = 1.0 / TIME_PER_ACTION
    FRAMES_PER_ACTION = 8

    image = None

    LEFT_RUN, RIGHT_RUN, LEFT_STAND, RIGHT_STAND,JUMP,LOAD,FIRE= 1, 1, 1, 1,1,1,1

    def __init__(self):
        self.x, self.y = 140, 600
        self.canvas_width = get_canvas_width()
        self.canvas_height = get_canvas_height()
        self.frame = 0
        self.life_time = 0.0
        self.total_frames = 0.0
        self.total_frame=0
        self.dir = 0
        self.up = 0
        self.a=0
        self.updir=0
        self.state = self.LOAD
        if Pistol.image == None:
            Pistol.image = load_image('pistol.png')

    def set_map1(self, bg):
        self.bg = bg
    def set_map2(self,bg):
        self.bg=bg
    def set_map3(self,bg):
        self.bg=bg
    def set_map4(self,bg):
        self.bg=bg



    def update(self, frame_time):
        #def clamp(minimum, x, maximum):
        #    return max(minimum, min(x, maximum))
        #def clamp(minimum,y,maximum):
        #    return max(minimum,min(y,maximum))

        self.life_time += frame_time
        distance = Pistol.RUN_SPEED_PPS * frame_time
        self.total_frames += Pistol.FRAMES_PER_ACTION * Pistol.ACTION_PER_TIME * frame_time
        self.total_frame += Pistol.FRAMES_PER_ACTION * Pistol.ACTION_PER_TIME*frame_time
        self.frame = int(self.total_frames+1) % 3
        self.x +=(self.dir*distance)
        self.y +=(self.up*distance)

        self.x = clamp(0, self.x, self.bg.w)
        self.y = clamp(-120,self.y,self.bg.h)

        self.a = self.total_frame
        print("%d" % self.a)

        if self.x>800:
            self.x = Cat



        if self.a%8>7:
            self.up, self.updir=-2,1
#        elif self.updir==1 and self.y<115:
#            self.up, self.updir=0,0

        if self.y<-30:
            self.x ,self.y = 100,600


    def draw(self):
        sx = self.x - self.bg.window_left
        sy = self.y - self.bg.window_bottom
        self.image.draw(sx, sy)

    def stop(self):
        self.up=0




    def get_bb(self):
        return self.x - 20-self.bg.window_left, self.y - 20-self.bg.window_bottom, self.x+20-self.bg.window_left, self.y+20-self.bg.window_bottom
        pass

    def draw_bb(self):
        draw_rectangle(*self.get_bb())

    def set_cat(self, bg):
        self.bg = bg

    def handle_event(self, event):
        if (event.type, event.key) == (SDL_KEYDOWN, SDLK_LEFT):
            if self.state in (self.RIGHT_STAND, self.LEFT_STAND, self.RIGHT_RUN,self.JUMP):
                self.state = self.LEFT_RUN
                self.dir = -1
                normal_stage.a=0
        elif (event.type, event.key) == (SDL_KEYDOWN, SDLK_RIGHT):
            if self.state in (self.RIGHT_STAND, self.LEFT_STAND, self.LEFT_RUN,self.JUMP):
                self.state = self.RIGHT_RUN
                self.dir = 1
                normal_stage.a=0
        elif (event.type, event.key) == (SDL_KEYUP, SDLK_LEFT):
            if self.state in (self.LEFT_RUN,self.JUMP):
                self.state = self.LEFT_STAND
                self.dir = 0
                normal_stage.a=0
        elif (event.type, event.key) == (SDL_KEYUP, SDLK_RIGHT):
            if self.state in (self.RIGHT_RUN,self.JUMP):
                self.state = self.RIGHT_STAND
                self.dir = 0
                normal_stage.a=0
        elif (event.type, event.key)==(SDL_KEYDOWN,SDLK_UP):
            if self.state in(self.RIGHT_STAND,self.RIGHT_RUN,self.LEFT_STAND, self.LEFT_RUN):
                self.state = self.JUMP
                self.up = 2
                self.total_frame=0


        elif (event.type, event.key) == (SDL_KEYDOWN, SDLK_a):
            if self.state in (self.LOAD, self.FIRE,self.RIGHT_STAND,self.RIGHT_RUN,self.LEFT_STAND, self.LEFT_RUN,self.JUMP):
                self.state = self.FIRE
                self.up=0
                self.dir = 5

        elif (event.type, event.key) == (SDL_KEYUP, SDLK_a):
            #self.dir=-5
            #if self.x<200:
            #    self.dir=0
            pass


import random
import game_framework
import normal_stage
from pico2d import *


class Pistol:

    PIXEL_PER_METER = (10.0 / 0.3)           # 10 pixel 30 cm
    RUN_SPEED_KMPH = 20.0                    # Km / Hour
    RUN_SPEED_MPM = (RUN_SPEED_KMPH * 1000.0 / 60.0)
    RUN_SPEED_MPS = (RUN_SPEED_MPM / 60.0)
    RUN_SPEED_PPS = (RUN_SPEED_MPS * PIXEL_PER_METER)

    TIME_PER_ACTION = 0.5
    ACTION_PER_TIME = 1.0 / TIME_PER_ACTION
    FRAMES_PER_ACTION = 8

    image=None

    LEFT_RUN, RIGHT_RUN, LEFT_STAND, RIGHT_STAND,JUMP= 1, 1, 1, 1,1

    def __init__(self):
        self.x, self.y = 140, 550
        self.canvas_width = get_canvas_width()
        self.canvas_height = get_canvas_height()
        self.frame = 0
        self.life_time = 0.0
        self.total_frames = 0.0
        self.total_frame=0
        self.dir = 0
        self.up = 0
        self.a=0
        self.updir=0
        self.state = self.RIGHT_STAND
        if Pistol.image == None:
            Pistol.image = load_image('pistol.png')

    def set_map1(self, bg):
        self.bg = bg
    def set_map2(self,bg):
        self.bg=bg
    def set_map3(self,bg):
        self.bg=bg
    def set_map4(self,bg):
        self.bg=bg



    def update(self, frame_time):
        #def clamp(minimum, x, maximum):
        #    return max(minimum, min(x, maximum))
        #def clamp(minimum,y,maximum):
        #    return max(minimum,min(y,maximum))

        self.life_time += frame_time
        distance = Pistol.RUN_SPEED_PPS * frame_time
        self.total_frames += Pistol.FRAMES_PER_ACTION * Pistol.ACTION_PER_TIME * frame_time
        self.total_frame += Pistol.FRAMES_PER_ACTION * Pistol.ACTION_PER_TIME*frame_time
        self.frame = int(self.total_frames+1) % 3
        self.x += (self.dir * distance)
        self.y +=(self.up*distance)

        self.x = clamp(0, self.x, self.bg.w)
        self.y = clamp(-120,self.y,self.bg.h)

        self.a = self.total_frame
        print("%d" % self.a)



        if self.a%8>7:
            self.up, self.updir=-2,1
#        elif self.updir==1 and self.y<115:
#            self.up, self.updir=0,0

        if self.y<-30:
            self.x ,self.y = 100,600


    def draw(self):
        sx = self.x - self.bg.window_left
        sy = self.y - self.bg.window_bottom
        self.image.draw( sx, sy)

    def stoppipe(self):
        if self.up ==-2:
            self.up =0


        if self.x>430 and self.x<570 and self.y>65 and self.y<233:
            if self.dir==1:
                self.x-=2
            elif self.dir==-1:
                self.x+=2

    def stoppipe2(self):
        if self.up ==-2:
            self.up =0
        if self.x>1670 and self.x<1830 and self.y>65 and self.y<180:
            if self.dir==1:
                self.x-=2
            elif self.dir==-1:
                self.x+=2

    def stop(self):
        if self.up==-2:
            self.up=0


    def normal_stop(self):
        if self.up==-2:
            self.up=0
        if self.dir==1 and self.up==0:
            self.x-=4
        if self.dir==-1 and self.up==0:
            self.x+=4

    def block_stop(self):
        if self.dir==1 and self.up==2:
            self.up=-20
        if self.dir==-1 and self.up==2:
            self.up=-20


        pass

    def start(self):
        self.x = 100
        self.y = 600




    def get_bb(self):
        return self.x - 20-self.bg.window_left, self.y - 20-self.bg.window_bottom, self.x+20-self.bg.window_left, self.y+20-self.bg.window_bottom
        pass

    def draw_bb(self):
        draw_rectangle(*self.get_bb())

    def handle_event(self, event):
        if (event.type, event.key) == (SDL_KEYDOWN, SDLK_LEFT):
            if self.state in (self.RIGHT_STAND, self.LEFT_STAND, self.RIGHT_RUN,self.JUMP):
                self.state = self.LEFT_RUN
                self.dir = -1
                normal_stage.a=0
        elif (event.type, event.key) == (SDL_KEYDOWN, SDLK_RIGHT):
            if self.state in (self.RIGHT_STAND, self.LEFT_STAND, self.LEFT_RUN,self.JUMP):
                self.state = self.RIGHT_RUN
                self.dir = 1
                normal_stage.a=0
        elif (event.type, event.key) == (SDL_KEYUP, SDLK_LEFT):
            if self.state in (self.LEFT_RUN,self.JUMP):
                self.state = self.LEFT_STAND
                self.dir = 0
                normal_stage.a=0
        elif (event.type, event.key) == (SDL_KEYUP, SDLK_RIGHT):
            if self.state in (self.RIGHT_RUN,self.JUMP):
                self.state = self.RIGHT_STAND
                self.dir = 0
                normal_stage.a=0
        elif (event.type, event.key)==(SDL_KEYDOWN,SDLK_UP):
            if self.state in(self.RIGHT_STAND,self.RIGHT_RUN,self.LEFT_STAND, self.LEFT_RUN):
                if self.up<1 and self.up>-1:
                    self.state = self.JUMP
                    self.up = 2
                    self.total_frame=0


        elif (event.type, event.key) == (SDL_KEYDOWN, SDLK_a):
            if self.state in (self.RIGHT_STAND, self.RIGHT_RUN, self.LEFT_STAND, self.LEFT_RUN):
                if self.up < 1 and self.up > -1:
                    self.state = self.JUMP
                    self.up = 2
                    self.dir=5






//////////////
import random
import game_framework
import normal_stage
from pico2d import *


class Pistol:
    pistol = []

    PIXEL_PER_METER = (10.0 / 0.3)           # 10 pixel 30 cm
    RUN_SPEED_KMPH = 20.0                    # Km / Hour
    RUN_SPEED_MPM = (RUN_SPEED_KMPH * 1000.0 / 60.0)
    RUN_SPEED_MPS = (RUN_SPEED_MPM / 60.0)
    RUN_SPEED_PPS = (RUN_SPEED_MPS * PIXEL_PER_METER)

    TIME_PER_ACTION = 0.5
    ACTION_PER_TIME = 1.0 / TIME_PER_ACTION
    FRAMES_PER_ACTION = 8

    image=None

    LEFT_RUN, RIGHT_RUN, LEFT_STAND, RIGHT_STAND,JUMP= 1, 1, 1, 1,1

    def __init__(self):
        self.x, self.y = 140, 550
        self.canvas_width = get_canvas_width()
        self.canvas_height = get_canvas_height()
        self.frame = 0
        self.life_time = 0.0
        self.total_frames = 0.0
        self.total_frame=0
        self.dir = 0
        self.up = 0
        self.a=0
        self.updir=0
        self.state = self.RIGHT_STAND
        if Pistol.image == None:
            Pistol.image = load_image('pistol.png')

    def set_map1(self, bg):
        self.bg = bg
    def set_map2(self,bg):
        self.bg=bg
    def set_map3(self,bg):
        self.bg=bg
    def set_map4(self,bg):
        self.bg=bg



    def update(self, frame_time):
        #def clamp(minimum, x, maximum):
        #    return max(minimum, min(x, maximum))
        #def clamp(minimum,y,maximum):
        #    return max(minimum,min(y,maximum))

        self.life_time += frame_time
        distance = Pistol.RUN_SPEED_PPS * frame_time
        self.total_frames += Pistol.FRAMES_PER_ACTION * Pistol.ACTION_PER_TIME * frame_time
        self.total_frame += Pistol.FRAMES_PER_ACTION * Pistol.ACTION_PER_TIME*frame_time
        self.frame = int(self.total_frames+1) % 3
        self.x += (self.dir * distance)
        self.y +=(self.up*distance)

        self.x = clamp(0, self.x, self.bg.w)
        self.y = clamp(-120,self.y,self.bg.h)

        self.a = self.total_frame
        print("%d" % self.a)



        if self.a%8>7:
            self.up, self.updir=-2,1
#        elif self.updir==1 and self.y<115:
#            self.up, self.updir=0,0

        if self.y<-30:
            self.x ,self.y = 100,600


    def draw(self):
        sx = self.x - self.bg.window_left
        sy = self.y - self.bg.window_bottom
        self.image.draw( sx, sy)

    def stoppipe(self):
        if self.up ==-2:
            self.up =0


        if self.x>430 and self.x<570 and self.y>65 and self.y<233:
            if self.dir==1:
                self.x-=2
            elif self.dir==-1:
                self.x+=2

    def stoppipe2(self):
        if self.up ==-2:
            self.up =0
        if self.x>1670 and self.x<1830 and self.y>65 and self.y<180:
            if self.dir==1:
                self.x-=2
            elif self.dir==-1:
                self.x+=2

    def stop(self):
        if self.up==-2:
            self.up=0


    def normal_stop(self):
        if self.up==-2:
            self.up=0
        if self.dir==1 and self.up==0:
            self.x-=4
        if self.dir==-1 and self.up==0:
            self.x+=4

    def block_stop(self):
        if self.dir==1 and self.up==2:
            self.up=-20
        if self.dir==-1 and self.up==2:
            self.up=-20


        pass

    def start(self):
        self.x = 100
        self.y = 600




    def get_bb(self):
        return self.x - 20-self.bg.window_left, self.y - 20-self.bg.window_bottom, self.x+20-self.bg.window_left, self.y+20-self.bg.window_bottom
        pass

    def draw_bb(self):
        draw_rectangle(*self.get_bb())

    def handle_event(self, event):
        if (event.type, event.key) == (SDL_KEYDOWN, SDLK_LEFT):
            if self.state in (self.RIGHT_STAND, self.LEFT_STAND, self.RIGHT_RUN,self.JUMP):
                self.state = self.LEFT_RUN
                self.dir = -1
                normal_stage.a=0
        elif (event.type, event.key) == (SDL_KEYDOWN, SDLK_RIGHT):
            if self.state in (self.RIGHT_STAND, self.LEFT_STAND, self.LEFT_RUN,self.JUMP):
                self.state = self.RIGHT_RUN
                self.dir = 1
                normal_stage.a=0
        elif (event.type, event.key) == (SDL_KEYUP, SDLK_LEFT):
            if self.state in (self.LEFT_RUN,self.JUMP):
                self.state = self.LEFT_STAND
                self.dir = 0
                normal_stage.a=0
        elif (event.type, event.key) == (SDL_KEYUP, SDLK_RIGHT):
            if self.state in (self.RIGHT_RUN,self.JUMP):
                self.state = self.RIGHT_STAND
                self.dir = 0
                normal_stage.a=0
        elif (event.type, event.key)==(SDL_KEYDOWN,SDLK_UP):
            if self.state in(self.RIGHT_STAND,self.RIGHT_RUN,self.LEFT_STAND, self.LEFT_RUN):
                if self.up<1 and self.up>-1:
                    self.state = self.JUMP
                    self.up = 2
                    self.total_frame=0


        elif (event.type, event.key) == (SDL_KEYDOWN, SDLK_a):
            if self.state in (self.RIGHT_STAND, self.RIGHT_RUN, self.LEFT_STAND, self.LEFT_RUN):
                if self.up < 1 and self.up > -1:
                    self.state = self.JUMP
                    self.up = 2
                    self.dir=5



#boss
    def handle_event(self, event):
        if (event.type, event.key) == (SDL_KEYDOWN, SDLK_LEFT):
            if self.state in (self.RIGHT_STAND, self.LEFT_STAND, self.RIGHT_RUN,self.JUMP):
                self.state = self.LEFT_RUN
                self.dir = -1

        elif (event.type, event.key) == (SDL_KEYDOWN, SDLK_RIGHT):
            if self.state in (self.RIGHT_STAND, self.LEFT_STAND, self.LEFT_RUN,self.JUMP):
                self.state = self.RIGHT_RUN
                self.dir = 1

        elif (event.type, event.key) == (SDL_KEYUP, SDLK_LEFT):
            if self.state in (self.LEFT_RUN,self.JUMP):
                self.state = self.LEFT_STAND
                self.dir = 0

        elif (event.type, event.key) == (SDL_KEYUP, SDLK_RIGHT):
            if self.state in (self.RIGHT_RUN,self.JUMP):
                self.state = self.RIGHT_STAND
                self.dir = 0

        elif (event.type, event.key)==(SDL_KEYDOWN,SDLK_UP):
            if self.state in(self.RIGHT_STAND,self.RIGHT_RUN,self.LEFT_STAND, self.LEFT_RUN):
                if self.up<1 and self.up>-1:
                    self.state = self.JUMP
                    self.up = 2
                    self.total_frame=0


